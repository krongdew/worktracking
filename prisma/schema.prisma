// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ระบบผู้ใช้งาน
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String    // จัดเก็บแบบ hashed
  name          String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  yearPlans     YearPlan[]
  todoLists     TodoList[]
  tasks         Task[]
  flowcharts    Flowchart[]
  
  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

// ระบบ Year Plan
model YearPlan {
  id          String    @id @default(cuid())
  title       String
  description String?
  year        Int
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities  YearPlanActivity[]
  
  @@map("year_plans")
}

model YearPlanActivity {
  id            String    @id @default(cuid())
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime
  category      String?
  type          ActivityType @default(OTHER)
  yearPlanId    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  yearPlan      YearPlan  @relation(fields: [yearPlanId], references: [id], onDelete: Cascade)
  tasks         Task[]
  
  @@map("year_plan_activities")
}

enum ActivityType {
  ONGOING
  PARTIAL
  EVENT
  TRAINING
  DESIGN
  OTHER
}

// ระบบ To-do List
model TodoList {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  type        TodoType  // รายวัน / รายสัปดาห์ / รายเดือน
  status      TodoStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("todo_lists")
}

enum TodoType {
  DAILY
  WEEKLY
  MONTHLY
}

enum TodoStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// ระบบ Task Tracking
model Task {
  id            String    @id @default(cuid())
  title         String
  description   String?
  startDateTime DateTime  
  endDateTime   DateTime?
  location      String?
  status        TaskStatus @default(PENDING)
  notes         String?
  deliveryDetails String?
  userId        String
  activityId    String?   // เชื่อมโยงกับ Year Plan Activity (nullable)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity      YearPlanActivity? @relation(fields: [activityId], references: [id], onDelete: SetNull)
  progress      TaskProgress[]
  
  @@map("tasks")
}

model TaskProgress {
  id            String    @id @default(cuid())
  description   String
  percentComplete Float    @default(0)
  taskId        String
  createdAt     DateTime  @default(now())

  // Relations
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@map("task_progress")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELLED
}

// ระบบ Flowchart
model Flowchart {
  id          String    @id @default(cuid())
  title       String
  description String?
  content     String    // JSON string สำหรับเก็บข้อมูล flowchart
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("flowcharts")
}

// ระบบ Session สำหรับการ authentication
model Session {
  id          String    @id @default(cuid())
  userId      String
  token       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  
  @@map("sessions")
}